{"ast":null,"code":"export class Api {\n  constructor(_ref) {\n    let {\n      url,\n      headers\n    } = _ref;\n    this._url = url;\n    this._headers = headers;\n  }\n\n  // Проверка запроса к серверу\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  // Редактирование профиля:отправка и загрузка информации о пользователе\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  setUserInfo(data) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(this._checkResponse);\n  }\n\n  // Обновление аватара пользователя\n  setUserAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(this._checkResponse);\n  }\n\n  // Загрузка карточек с сервера\n  getPhotoCards() {\n    return fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: 'include'\n    }).then(this._checkResponse);\n  }\n\n  // Добавление новой карточки\n  addCard(data) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      credentials: 'include',\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(this._checkResponse);\n  }\n\n  // Удаления карточки\n  deleteCard(card) {\n    return fetch(`${this._url}/cards/${card._id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n      credentials: 'include'\n    }).then(this._checkResponse);\n  }\n\n  // Лайки и дизлайки карточек\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: `${!isLiked ? 'DELETE' : 'PUT'}`,\n      headers: this._headers,\n      credentials: 'include'\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  url: 'http://localhost:4000/',\n  headers: {\n    authorization: 'e368c92f-c32b-427b-8564-6fade10747a3',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","url","headers","_url","_headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","credentials","then","setUserInfo","data","body","JSON","stringify","name","about","setUserAvatar","avatar","getPhotoCards","addCard","link","deleteCard","card","_id","changeLikeCardStatus","cardId","isLiked","api","authorization"],"sources":["C:/Users/yanik/dev/react-mesto-api-full-gha/frontend/src/utils/api.js"],"sourcesContent":["export class Api {\n    constructor({ url, headers }) {\n        this._url = url;\n        this._headers = headers;\n    }\n\n    // Проверка запроса к серверу\n    _checkResponse(res) {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n    }\n\n    // Редактирование профиля:отправка и загрузка информации о пользователе\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            method: 'GET',\n            credentials: 'include',\n            headers: this._headers\n        }).then(this._checkResponse);\n    }\n\n    setUserInfo(data) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            credentials: 'include',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        }).then(this._checkResponse);\n    }\n\n    // Обновление аватара пользователя\n    setUserAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            credentials: 'include',\n            headers: this._headers,\n\n            body: JSON.stringify({\n                avatar: data.avatar\n            })\n        }).then(this._checkResponse);\n    }\n\n    // Загрузка карточек с сервера\n    getPhotoCards() {\n        return fetch(`${this._url}/cards`, {\n            method: 'GET',\n            headers: this._headers,\n            credentials: 'include'\n        }).then(this._checkResponse);\n    }\n\n    // Добавление новой карточки\n    addCard(data) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            credentials: 'include',\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        }).then(this._checkResponse);\n    }\n\n    // Удаления карточки\n    deleteCard(card) {\n        return fetch(`${this._url}/cards/${card._id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n            credentials: 'include'\n        }).then(this._checkResponse);\n    }\n\n    // Лайки и дизлайки карточек\n    changeLikeCardStatus(cardId, isLiked) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: `${!isLiked ? 'DELETE' : 'PUT'}`,\n            headers: this._headers,\n            credentials: 'include'\n        }).then(this._checkResponse);\n    }\n}\n\nconst api = new Api({\n    url: 'http://localhost:4000/',\n    headers: {\n        authorization: 'e368c92f-c32b-427b-8564-6fade10747a3',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}